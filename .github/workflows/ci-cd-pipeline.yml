name: CI/CD Pipeline for Selenium with Allure Report

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Install Allure CLI
      - name: Install Allure CLI
        run: |
          wget https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.23.0/allure-commandline-2.23.0.zip
          unzip allure-commandline-2.23.0.zip -d allure-cli
          sudo mv allure-cli/allure-2.23.0 /opt/allure
          sudo chmod -R +x /opt/allure/bin
          echo 'export PATH=/opt/allure/bin:$PATH' >> $GITHUB_ENV
          source $GITHUB_ENV
          allure --version

      # Step 5: Create settings-security.xml for Maven
      - name: Create settings-security.xml
        run: |
          mkdir -p ~/.m2
          echo "${{ secrets.MAVEN_SETTINGS_SECURITY }}" > ~/.m2/settings-security.xml

      # Step 6: Run Maven tests with debug output
      - name: Run Maven tests with debug output
        run: |
          mvn clean test -DsuiteXmlFile=testng.xml -Dallure.results.directory=allure-results -X

      # Step 7: List Allure results for debugging
      - name: List Allure Results
        run: |
          ls allure-results

      # Step 8: Generate Allure Report
      - name: Generate Allure Report
        run: |
          export PATH=/opt/allure/bin:$PATH
          allure generate allure-results --clean -o allure-report

      # Step 9: Upload Allure Results as Artifact (updated to v4)
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

      # Step 10: Upload Allure Report as Artifact (updated to v4)
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      # Step 11: Provide Link to Allure Report
      - name: Provide Link to Allure Report
        run: |
          echo "The Allure Report has been generated and uploaded as an artifact."
          echo "You can download and view it from the GitHub Actions UIA."